#!/bin/sh

debug() { ! "${log_debug-false}" || log "DEBUG: $*" >&2; }
log() { printf '%s\n' "$*"; }
warn() { log "WARNING: $*" >&2; }
error() { log "ERROR: $*" >&2; }
fatal() { error "$*"; exit 1; }
mydir=$(cd "$(dirname "$0")" && pwd -L) || fatal "Unable to determine script directory"

PATH=${PATH}:/usr/local/bin:/opt/local/bin
export PATH

printf "BRANCH: ${GIT_BRANCH} GIT VERSION: "
git describe --always

# clean everything out
log "Cleaning up working directory"
cd "${WORKSPACE}"
count=0
success=0
while [ ${count} -lt 10 -a ${success} -eq 0 ]; do
    git clean -fdx
    if [ $? -eq 0 ]; then
        success=1
    fi
    count=$(( count + 1 ))
done
if [ ${success} -eq 0 ]; then
    fatal "Error running git clean"
fi

${mydir}/copy-paste-detector || fatal "Error running copy paste detect"

cd ${mydir}
./sloccount.sh || fatal "Error running sloccount"

# cppcheck
cd ${WORKSPACE}
cppcheck -I src --enable=all --xml src test 2> ${mydir}/cppcheck.xml


# setup test config
mkdir -p "${WORKSPACE}/install/etc"
mkdir -p "${WORKSPACE}/install/log"
log "file = true" >> "${WORKSPACE}/install/etc/rootsh.cfg"
log "file.dir = ${WORKSPACE}/install/log" >> "${WORKSPACE}/install/etc/rootsh.cfg"
log "syslog = false" >> "${WORKSPACE}/install/etc/rootsh.cfg"

cd "${WORKSPACE}"
./bootstrap.sh || fatal "Error executing bootstrap"

./configure --prefix="${WORKSPACE}"/install || fatal "Error configuring"

make || fatal "Error building"

make check || fatal "Error running tests"

${mydir}/run-valgrind || fatal "Error running valgrind"

${mydir}/run-coverage || fatal "Error running coverage"
